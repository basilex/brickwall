// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: profile.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const profileCount = `-- name: ProfileCount :one
select count(*) from profile
`

// ProfileCount
//
//	select count(*) from profile
func (q *Queries) ProfileCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, profileCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const profileIsExists = `-- name: ProfileIsExists :one
select case when exists (
    select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.user_id = $1
) then cast(1 as bit) else cast(0 as bit) end
`

// ProfileIsExists
//
//	select case when exists (
//	    select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.user_id = $1
//	) then cast(1 as bit) else cast(0 as bit) end
func (q *Queries) ProfileIsExists(ctx context.Context, userID string) (pgtype.Bits, error) {
	row := q.db.QueryRow(ctx, profileIsExists, userID)
	var column_1 pgtype.Bits
	err := row.Scan(&column_1)
	return column_1, err
}

const profileNew = `-- name: ProfileNew :one
insert into profile(
    user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa
) values(
    $1, $2, $3, $4, $5, $6, $7, $8
) returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
`

type ProfileNewParams struct {
	UserID    string      `json:"user_id"`
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Gender    string      `json:"gender"`
	Birthday  pgtype.Date `json:"birthday"`
	AvatarUrl string      `json:"avatar_url"`
	Enable2fa bool        `json:"enable_2fa"`
	Secret2fa pgtype.Text `json:"secret_2fa"`
}

// ProfileNew
//
//	insert into profile(
//	    user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa
//	) values(
//	    $1, $2, $3, $4, $5, $6, $7, $8
//	) returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
func (q *Queries) ProfileNew(ctx context.Context, arg *ProfileNewParams) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileNew,
		arg.UserID,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Birthday,
		arg.AvatarUrl,
		arg.Enable2fa,
		arg.Secret2fa,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const profileSelect = `-- name: ProfileSelect :many
select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
  from profile p
 order by $1::text
 limit $3 offset $2
`

type ProfileSelectParams struct {
	SqlOrder  string `json:"sql_order"`
	SqlOffset int32  `json:"sql_offset"`
	SqlLimit  int32  `json:"sql_limit"`
}

// ProfileSelect
//
//	select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
//	  from profile p
//	 order by $1::text
//	 limit $3 offset $2
func (q *Queries) ProfileSelect(ctx context.Context, arg *ProfileSelectParams) ([]*Profile, error) {
	rows, err := q.db.Query(ctx, profileSelect, arg.SqlOrder, arg.SqlOffset, arg.SqlLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Firstname,
			&i.Lastname,
			&i.Gender,
			&i.Birthday,
			&i.AvatarUrl,
			&i.Enable2fa,
			&i.Secret2fa,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const profileSelectByID = `-- name: ProfileSelectByID :one
select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.id = $1
`

// ProfileSelectByID
//
//	select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.id = $1
func (q *Queries) ProfileSelectByID(ctx context.Context, id string) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileSelectByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const profileSelectByUserID = `-- name: ProfileSelectByUserID :one
select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.user_id = $1
`

// ProfileSelectByUserID
//
//	select id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at from profile p where p.user_id = $1
func (q *Queries) ProfileSelectByUserID(ctx context.Context, id string) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileSelectByUserID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const profileUpdate2FAById = `-- name: ProfileUpdate2FAById :one
update profile
   set enable_2fa = $1, secret_2fa = $2
 where id = $3 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
`

type ProfileUpdate2FAByIdParams struct {
	Enable2fa bool        `json:"enable_2fa"`
	Secret2fa pgtype.Text `json:"secret_2fa"`
	ID        string      `json:"id"`
}

// ProfileUpdate2FAById
//
//	update profile
//	   set enable_2fa = $1, secret_2fa = $2
//	 where id = $3 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
func (q *Queries) ProfileUpdate2FAById(ctx context.Context, arg *ProfileUpdate2FAByIdParams) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileUpdate2FAById, arg.Enable2fa, arg.Secret2fa, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const profileUpdateAvatarUrlById = `-- name: ProfileUpdateAvatarUrlById :one
update profile
   set avatar_url = $1
 where id = $2 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
`

type ProfileUpdateAvatarUrlByIdParams struct {
	AvatarUrl string `json:"avatar_url"`
	ID        string `json:"id"`
}

// ProfileUpdateAvatarUrlById
//
//	update profile
//	   set avatar_url = $1
//	 where id = $2 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
func (q *Queries) ProfileUpdateAvatarUrlById(ctx context.Context, arg *ProfileUpdateAvatarUrlByIdParams) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileUpdateAvatarUrlById, arg.AvatarUrl, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const profileUpdateCommonById = `-- name: ProfileUpdateCommonById :one
update profile
   set firstname = $1, lastname = $2, gender = $3, birthday = $4
 where id = $5 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
`

type ProfileUpdateCommonByIdParams struct {
	Firstname string      `json:"firstname"`
	Lastname  string      `json:"lastname"`
	Gender    string      `json:"gender"`
	Birthday  pgtype.Date `json:"birthday"`
	ID        string      `json:"id"`
}

// ProfileUpdateCommonById
//
//	update profile
//	   set firstname = $1, lastname = $2, gender = $3, birthday = $4
//	 where id = $5 returning id, user_id, firstname, lastname, gender, birthday, avatar_url, enable_2fa, secret_2fa, created_at, updated_at
func (q *Queries) ProfileUpdateCommonById(ctx context.Context, arg *ProfileUpdateCommonByIdParams) (*Profile, error) {
	row := q.db.QueryRow(ctx, profileUpdateCommonById,
		arg.Firstname,
		arg.Lastname,
		arg.Gender,
		arg.Birthday,
		arg.ID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Firstname,
		&i.Lastname,
		&i.Gender,
		&i.Birthday,
		&i.AvatarUrl,
		&i.Enable2fa,
		&i.Secret2fa,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
