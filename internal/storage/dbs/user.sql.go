// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package dbs

import (
	"context"
)

const userDeleteByID = `-- name: UserDeleteByID :one
delete from users u where u.id = $1 returning id
`

// UserDeleteByID
//
//	delete from users u where u.id = $1 returning id
func (q *Queries) UserDeleteByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, userDeleteByID, id)
	err := row.Scan(&id)
	return id, err
}

const userNew = `-- name: UserNew :one
insert into users(
    username, password
) values(
    $1, $2
) returning id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserNewParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// UserNew
//
//	insert into users(
//	    username, password
//	) values(
//	    $1, $2
//	) returning id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserNew(ctx context.Context, arg *UserNewParams) (*User, error) {
	row := q.db.QueryRow(ctx, userNew, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userSelect = `-- name: UserSelect :many
select id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
  from users u
 order by $1::text
 limit $3 offset $2
`

type UserSelectParams struct {
	SqlOrder  string `json:"sql_order"`
	SqlOffset int32  `json:"sql_offset"`
	SqlLimit  int32  `json:"sql_limit"`
}

// UserSelect
//
//	select id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
//	  from users u
//	 order by $1::text
//	 limit $3 offset $2
func (q *Queries) UserSelect(ctx context.Context, arg *UserSelectParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, userSelect, arg.SqlOrder, arg.SqlOffset, arg.SqlLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.IsBlocked,
			&i.IsChecked,
			&i.BlockedAt,
			&i.CheckedAt,
			&i.VisitedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userSelectByID = `-- name: UserSelectByID :one
select id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at from users u where u.id = $1
`

// UserSelectByID
//
//	select id, username, password, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at from users u where u.id = $1
func (q *Queries) UserSelectByID(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRow(ctx, userSelectByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
