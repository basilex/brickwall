// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package dbs

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const userCount = `-- name: UserCount :one
select count(*) from users
`

// UserCount
//
//	select count(*) from users
func (q *Queries) UserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, userCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userDeleteByID = `-- name: UserDeleteByID :one
delete from users where id = $1 returning id
`

// UserDeleteByID
//
//	delete from users where id = $1 returning id
func (q *Queries) UserDeleteByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, userDeleteByID, id)
	err := row.Scan(&id)
	return id, err
}

const userNew = `-- name: UserNew :one
insert into users(
    username, password
) values(
    $1, $2
) returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserNewParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type UserNewRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserNew
//
//	insert into users(
//	    username, password
//	) values(
//	    $1, $2
//	) returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserNew(ctx context.Context, arg *UserNewParams) (*UserNewRow, error) {
	row := q.db.QueryRow(ctx, userNew, arg.Username, arg.Password)
	var i UserNewRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userSelect = `-- name: UserSelect :many
select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
  from users u
 order by $1::text
 limit $3 offset $2
`

type UserSelectParams struct {
	SqlOrder  string `json:"sql_order"`
	SqlOffset int32  `json:"sql_offset"`
	SqlLimit  int32  `json:"sql_limit"`
}

type UserSelectRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserSelect
//
//	select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
//	  from users u
//	 order by $1::text
//	 limit $3 offset $2
func (q *Queries) UserSelect(ctx context.Context, arg *UserSelectParams) ([]*UserSelectRow, error) {
	rows, err := q.db.Query(ctx, userSelect, arg.SqlOrder, arg.SqlOffset, arg.SqlLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*UserSelectRow
	for rows.Next() {
		var i UserSelectRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IsBlocked,
			&i.IsChecked,
			&i.BlockedAt,
			&i.CheckedAt,
			&i.VisitedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userSelectByID = `-- name: UserSelectByID :one
select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
  from users u
 where u.id = $1
`

type UserSelectByIDRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserSelectByID
//
//	select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
//	  from users u
//	 where u.id = $1
func (q *Queries) UserSelectByID(ctx context.Context, id string) (*UserSelectByIDRow, error) {
	row := q.db.QueryRow(ctx, userSelectByID, id)
	var i UserSelectByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userSelectByUsername = `-- name: UserSelectByUsername :one
select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
  from users u
 where u.username = $1
`

type UserSelectByUsernameRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserSelectByUsername
//
//	select id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
//	  from users u
//	 where u.username = $1
func (q *Queries) UserSelectByUsername(ctx context.Context, username string) (*UserSelectByUsernameRow, error) {
	row := q.db.QueryRow(ctx, userSelectByUsername, username)
	var i UserSelectByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userUpdateCredentialsByID = `-- name: UserUpdateCredentialsByID :one
update users
   set username = $1, password = $2
 where id = $3
       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserUpdateCredentialsByIDParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	ID       string `json:"id"`
}

type UserUpdateCredentialsByIDRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserUpdateCredentialsByID
//
//	update users
//	   set username = $1, password = $2
//	 where id = $3
//	       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserUpdateCredentialsByID(ctx context.Context, arg *UserUpdateCredentialsByIDParams) (*UserUpdateCredentialsByIDRow, error) {
	row := q.db.QueryRow(ctx, userUpdateCredentialsByID, arg.Username, arg.Password, arg.ID)
	var i UserUpdateCredentialsByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userUpdateIsBlockedByID = `-- name: UserUpdateIsBlockedByID :one
update users
   set is_blocked = $1,
       blocked_at = case
                        when $1 then timezone('utc', now())
                        else blocket_at
                    end
 where id = $2
       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserUpdateIsBlockedByIDParams struct {
	IsBlocked bool   `json:"is_blocked"`
	ID        string `json:"id"`
}

type UserUpdateIsBlockedByIDRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserUpdateIsBlockedByID
//
//	update users
//	   set is_blocked = $1,
//	       blocked_at = case
//	                        when $1 then timezone('utc', now())
//	                        else blocket_at
//	                    end
//	 where id = $2
//	       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserUpdateIsBlockedByID(ctx context.Context, arg *UserUpdateIsBlockedByIDParams) (*UserUpdateIsBlockedByIDRow, error) {
	row := q.db.QueryRow(ctx, userUpdateIsBlockedByID, arg.IsBlocked, arg.ID)
	var i UserUpdateIsBlockedByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userUpdateIsCheckedByID = `-- name: UserUpdateIsCheckedByID :one
update users
   set is_checked = $1,
       checked_at = case
                        when $1 then timezone('utc', now())
                        else checked_at
                    end
 where id = $2
       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserUpdateIsCheckedByIDParams struct {
	IsChecked bool   `json:"is_checked"`
	ID        string `json:"id"`
}

type UserUpdateIsCheckedByIDRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserUpdateIsCheckedByID
//
//	update users
//	   set is_checked = $1,
//	       checked_at = case
//	                        when $1 then timezone('utc', now())
//	                        else checked_at
//	                    end
//	 where id = $2
//	       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserUpdateIsCheckedByID(ctx context.Context, arg *UserUpdateIsCheckedByIDParams) (*UserUpdateIsCheckedByIDRow, error) {
	row := q.db.QueryRow(ctx, userUpdateIsCheckedByID, arg.IsChecked, arg.ID)
	var i UserUpdateIsCheckedByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const userUpdateVisitedAtByID = `-- name: UserUpdateVisitedAtByID :one
update users
   set visited_at = $1
 where id = $2
       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
`

type UserUpdateVisitedAtByIDParams struct {
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	ID        string           `json:"id"`
}

type UserUpdateVisitedAtByIDRow struct {
	ID        string           `json:"id"`
	Username  string           `json:"username"`
	IsBlocked bool             `json:"is_blocked"`
	IsChecked bool             `json:"is_checked"`
	BlockedAt pgtype.Timestamp `json:"blocked_at"`
	CheckedAt pgtype.Timestamp `json:"checked_at"`
	VisitedAt pgtype.Timestamp `json:"visited_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

// UserUpdateVisitedAtByID
//
//	update users
//	   set visited_at = $1
//	 where id = $2
//	       returning id, username, is_blocked, is_checked, blocked_at, checked_at, visited_at, created_at, updated_at
func (q *Queries) UserUpdateVisitedAtByID(ctx context.Context, arg *UserUpdateVisitedAtByIDParams) (*UserUpdateVisitedAtByIDRow, error) {
	row := q.db.QueryRow(ctx, userUpdateVisitedAtByID, arg.VisitedAt, arg.ID)
	var i UserUpdateVisitedAtByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsBlocked,
		&i.IsChecked,
		&i.BlockedAt,
		&i.CheckedAt,
		&i.VisitedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
