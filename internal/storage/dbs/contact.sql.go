// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contact.sql

package dbs

import (
	"context"
)

const contactDeleteByID = `-- name: ContactDeleteByID :one
delete from users u where u.id = $1 returning id
`

// ContactDeleteByID
//
//	delete from users u where u.id = $1 returning id
func (q *Queries) ContactDeleteByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, contactDeleteByID, id)
	err := row.Scan(&id)
	return id, err
}

const contactNew = `-- name: ContactNew :one
insert into Contact(
    user_id, class, content
) values(
    $1, $2, $3
) returning id, user_id, class, content, created_at, updated_at
`

type ContactNewParams struct {
	UserID  string `json:"user_id"`
	Class   string `json:"class"`
	Content string `json:"content"`
}

// ContactNew
//
//	insert into Contact(
//	    user_id, class, content
//	) values(
//	    $1, $2, $3
//	) returning id, user_id, class, content, created_at, updated_at
func (q *Queries) ContactNew(ctx context.Context, arg *ContactNewParams) (*Contact, error) {
	row := q.db.QueryRow(ctx, contactNew, arg.UserID, arg.Class, arg.Content)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const contactSelect = `-- name: ContactSelect :many
select id, user_id, class, content, created_at, updated_at
  from contact p
 order by $1::text
 limit $3 offset $2
`

type ContactSelectParams struct {
	SqlOrder  string `json:"sql_order"`
	SqlOffset int32  `json:"sql_offset"`
	SqlLimit  int32  `json:"sql_limit"`
}

// ContactSelect
//
//	select id, user_id, class, content, created_at, updated_at
//	  from contact p
//	 order by $1::text
//	 limit $3 offset $2
func (q *Queries) ContactSelect(ctx context.Context, arg *ContactSelectParams) ([]*Contact, error) {
	rows, err := q.db.Query(ctx, contactSelect, arg.SqlOrder, arg.SqlOffset, arg.SqlLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Class,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const contactSelectByID = `-- name: ContactSelectByID :one
select id, user_id, class, content, created_at, updated_at from contact p where p.id = $1
`

// ContactSelectByID
//
//	select id, user_id, class, content, created_at, updated_at from contact p where p.id = $1
func (q *Queries) ContactSelectByID(ctx context.Context, id string) (*Contact, error) {
	row := q.db.QueryRow(ctx, contactSelectByID, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const contactSelectByUserID = `-- name: ContactSelectByUserID :many
select id, user_id, class, content, created_at, updated_at from contact p where p.user_id = $1 order by p.class
`

// ContactSelectByUserID
//
//	select id, user_id, class, content, created_at, updated_at from contact p where p.user_id = $1 order by p.class
func (q *Queries) ContactSelectByUserID(ctx context.Context, userID string) ([]*Contact, error) {
	rows, err := q.db.Query(ctx, contactSelectByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Class,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const contactSelectByUserIDClass = `-- name: ContactSelectByUserIDClass :many
select id, user_id, class, content, created_at, updated_at from contact p
 where p.user_id = $1
   and p.class = $2
   and p.content = $3
`

type ContactSelectByUserIDClassParams struct {
	UserID  string `json:"user_id"`
	Class   string `json:"class"`
	Content string `json:"content"`
}

// ContactSelectByUserIDClass
//
//	select id, user_id, class, content, created_at, updated_at from contact p
//	 where p.user_id = $1
//	   and p.class = $2
//	   and p.content = $3
func (q *Queries) ContactSelectByUserIDClass(ctx context.Context, arg *ContactSelectByUserIDClassParams) ([]*Contact, error) {
	rows, err := q.db.Query(ctx, contactSelectByUserIDClass, arg.UserID, arg.Class, arg.Content)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Class,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const contactUpdateByID = `-- name: ContactUpdateByID :one
update contact
   set class = $1, content = $2
 where id = $3 returning id, user_id, class, content, created_at, updated_at
`

type ContactUpdateByIDParams struct {
	Class   string `json:"class"`
	Content string `json:"content"`
	ID      string `json:"id"`
}

// ContactUpdateByID
//
//	update contact
//	   set class = $1, content = $2
//	 where id = $3 returning id, user_id, class, content, created_at, updated_at
func (q *Queries) ContactUpdateByID(ctx context.Context, arg *ContactUpdateByIDParams) (*Contact, error) {
	row := q.db.QueryRow(ctx, contactUpdateByID, arg.Class, arg.Content, arg.ID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Class,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
